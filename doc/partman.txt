Open Computers Drive Tools - Partition Manager

Author: Matthew (CntKillMe)
Requires: Lua 5.3
Description: a framework to assist in managing drives and partition tables and entries.


[ FRAMEWORK ]

tuple<number, string> formatCapacity(uint64 capacity)
	Divides capacity by its greatest power of 1024 and returns the appropriate suffix (nil if none is available).
	Example: formatCapacity(31) -> 31, "bytes"
	Example: formatCapacity(4718592) -> 4.5, "MiB"
	Example: formatCapacity(2^40) -> 1, "TiB"

void registerFlag(string name, uint8 bitIndex)
	Registers a new flag at the given bit index and assigns it a mnemonic, throws an error if the given flag already exists.
	bitIndex should be between [0, 16) to be usable.

void registerType(string name, uint16 entry)
	Registers a new type with the given entry and assigns it a mnemonic, throws an error if the given type already exists.

string getFlagName(uint8 bitIdx)
	Returns the name of the given flag, nil if unknown.

string getTypeName(uint16 entry)
	Returns the name of the given type, nil if unknown.

array<uint8> getFlags()
	Returns a list of all standard flags.

array<uint16> getTypes()
	Returns a list of all standard types.

array<drive> getDrives()
	Returns an array of attached drive components as drives (see drive class).


[ STATE CLASS ]

static state new()
	Returns a new OCPT state.

void reset()
	Resets the state.

void load(drive drive)
	Loads an OCPT drive and decodes the partition table.

void save()
	Encodes the modified partition table and writes it to the drive.

string dump()
	Encodes the modified partition table and returns it. Does not write to drive.

void analyze(array<string> errors, array<string> warnings, array<string> notes)
	Analyzes the header and all active partitions for potential problems.
	Errors must be fixed, warnings should be fixed, notes may be fixed.

drive getDrive()
	Returns the associated drive (see drive class).

partition getPartition(uint8 entry)
	Returns the given partition (see partition class).

string getSignature()
	Returns the signature.

array<partition> getActivePartitions()
	Returns a list of active partitions.

partition getLastBootPartition()
	Returns the partition last booted from.

partition getBIOSPartition()
	Returns the BIOS partition.

string getBIOSData()
	Returns the BIOS data.

void setBIOSPartition(uint8 entry)
	Sets the BIOS partition.
	entry should be between [0, 32) to be usable.

void setBIOSData(string data)
	Sets the BIOS data.
	The length of data should not exceed 118

[ PARTITION CLASS ]
Partition entries are 0-based, so the partitions of a drive range from [0, 32).
The BIOS partition must be a bootable and raw partition for the standard EEPROM to boot from it. If no active or valid BIOS partition is given, the first possible bootable, raw partition will be executed.

static partition new(uint8 entry, state ocpt)
	Returns a new partition associated with a partition table.

void decode(string ocpe)
	Decodes the given partition entry.

bool isActive()
	Returns true if the partition is active.

uint8 getEntry()
	Returns the partition number.

uint32 getFirstSector()
	Returns the first sector.

uint32 getNumSectors()
	Returns the number of sectors.

uint32, uint32 getSectorRange()
	Returns the start and end sectors of the partition.
	The range of a partition is [firstSector, firstSector + numSectors).

uint16 getFlags()
	Returns the partition's flags.

bool hasFlag(uint8 bit)
	Returns true if the given flag is set.

uint16 getType()
	Returns the partition type.

void activate()
	Activates the partition.

void deactivate()
	Deactivates the partition.

void setFirstSector(uint32 firstSector)
	Sets the first sector of the partition.

void setNumSectors(uint32 numSectors)
	Sets the number of sectors used by the partition.

void setFlags(uint16 flags)
	Sets the flags of the partition.

void setFlag(uint8 bit)
	Sets a flag.

void clearFlag(uint8 bit)
	Unsets a flag.

void toggleFlag(uint8 bit)
	Toggles a flag.

void clearFlags()
	Unsets all flags.

void setType(uint16 type)
	Sets the type of the partition.

void analyze(array<string> errors, array<string> warnings, array<string> notes)
	Analyzes the partition for potential problems if the partition is active.
	Errors must be fixed, warnings should be fixed, notes may be fixed.
